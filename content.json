{"pages":[{"title":"about","text":"Myhere1 关于作者 90后，大四在读 联系方式 微信: xu6980584 博客: https://myhere1.github.io/ 扫码添加作者","link":"/about/index.html"}],"posts":[{"title":"Mybatis延迟加载和缓存","text":"Mybatis中的延迟加载延迟加载的引入引入问题:在一对多中，当我们有一个用户，它有100个账户。 在查询用户的时候要不要把所有的账户都查询出来？ 在查询账户的时候，要不要把关联的用户查出来？&nbsp; 在查询用户时，用户下的账户信息应当是，什么时候用，什么时候查询出来 在查询账户时，账户所属的用户信息应当是随着账户查询时一起查询出来 什么是延迟加载？在真正使用数据时，才发起查询。按需加载(懒加载) 什么是立即加载？不管有没有使用到，只要一调用方法，马上发起查询 在对应的四种表关系中：一对多，多对一，一对一，多对多一对多、多对多 : 一般采取延迟加载 一对一、多对一 : 一般采用立即加载 开启延迟加载在主配置文件SqlMapConfig.xml中1234567&lt;!--配置参数--&gt; &lt;settings&gt; &lt;!--开启Mybatis延迟加载的全局开关--&gt; &lt;setting name=\"lazyLoadingEnabled\" value=\"true\"/&gt; &lt;!--每个属性都会按需加载 可以不配 默认值就是false--&gt; &lt;setting name=\"aggressiveLazyLoading\" value=\"false\"&gt;&lt;/setting&gt; &lt;/settings&gt; 在AccountMapper.xml中1234567891011&lt;resultMap id=\"accountUserMap\" type=\"account\"&gt; &lt;id property=\"id\" column=\"id\"&gt;&lt;/id&gt; &lt;result property=\"uid\" column=\"uid\"&gt;&lt;/result&gt; &lt;result property=\"money\" column=\"money\"&gt;&lt;/result&gt; &lt;!--1对1关系映射,配置封装user内容 column设置为从表中的外键--&gt; &lt;association property=\"user\" column=\"uid\" javaType=\"user\" select=\"com.xushui.dao.UserMapper.findById\"&gt;&lt;/association&gt;&lt;/resultMap&gt;&lt;select id=\"findAll\" resultMap=\"accountUserMap\" &gt; select * from account a&lt;/select&gt; 在UserMapper.xml中123&lt;select id=\"findById\" parameterType=\"Integer\" resultType=\"User\"&gt; select * from user where id = #{id}&lt;/select&gt; 当只执行，不需要用到用户信息时，使用了延迟加载1234@Test public void testFindAll() { List&lt;Account&gt; accounts = accountMapper.findAll(); } 在日志信息中可以看到1232019-07-31 10:34:20,357 723 [ main] DEBUG shui.dao.AccountMapper.findAll - ==&gt; Preparing: select * from account a 2019-07-31 10:34:20,392 758 [ main] DEBUG shui.dao.AccountMapper.findAll - ==&gt; Parameters: 2019-07-31 10:34:20,477 843 [ main] DEBUG shui.dao.AccountMapper.findAll - &lt;== Total: 3 若需要用户信息时12345678@Testpublic void testFindAll() { List&lt;Account&gt; accounts = accountMapper.findAll(); for (Account account : accounts) { System.out.println(account); System.out.println(account.getUser()); }} 在日志中可以看到对用户信息发起了查询1234567891011121314152019-07-31 10:44:13,182 635 [ main] DEBUG shui.dao.AccountMapper.findAll - ==&gt; Preparing: select * from account a 2019-07-31 10:44:13,229 682 [ main] DEBUG shui.dao.AccountMapper.findAll - ==&gt; Parameters: 2019-07-31 10:44:13,285 738 [ main] DEBUG shui.dao.AccountMapper.findAll - &lt;== Total: 32019-07-31 10:44:13,286 739 [ main] DEBUG xushui.dao.UserMapper.findById - ==&gt; Preparing: select * from user where id = ? 2019-07-31 10:44:13,286 739 [ main] DEBUG xushui.dao.UserMapper.findById - ==&gt; Parameters: 41(Integer)2019-07-31 10:44:13,295 748 [ main] DEBUG xushui.dao.UserMapper.findById - &lt;== Total: 1Account{id=1, uid=41, money=1000.0}User{id=41, username=&apos;老王&apos;, birthday=Tue Feb 27 17:47:08 CST 2018, sex=&apos;男&apos;, address=&apos;北京&apos;}2019-07-31 10:44:13,295 748 [ main] DEBUG xushui.dao.UserMapper.findById - ==&gt; Preparing: select * from user where id = ? 2019-07-31 10:44:13,295 748 [ main] DEBUG xushui.dao.UserMapper.findById - ==&gt; Parameters: 45(Integer)2019-07-31 10:44:13,297 750 [ main] DEBUG xushui.dao.UserMapper.findById - &lt;== Total: 1Account{id=2, uid=45, money=1000.0}User{id=45, username=&apos;传智播客&apos;, birthday=Sun Mar 04 12:04:06 CST 2018, sex=&apos;男&apos;, address=&apos;北京金燕龙&apos;}Account{id=3, uid=41, money=2000.0}User{id=41, username=&apos;老王&apos;, birthday=Tue Feb 27 17:47:08 CST 2018, sex=&apos;男&apos;, address=&apos;北京&apos;} Mybatis中的缓存什么是缓存？存在内存中的临时数据，比如说在第一次查询之后，就将其存储在内存，下一次要使用时，就不需要再去数据库查询，减少与数据库交互的次数，从而提高执行效率。 为什么使用缓存？减少和数据库交互次数，提高执行效率。 什么样的数据能使用缓存，什么样的数据不能使用？- 适用于缓存 - 使用频率高的数据 - 不经常改变的数据 - 数据的正确与否对最终效果影响不大的数据 - 不适用缓存的 - 经常改变的数据 - 数据的正确与否对最终结果影响很大的数据 - 例:商品的库存，银行的汇率，股市的牌价 Mybatis中的一级缓存和二级缓存一级缓存- 它指的是Mybatis中SqlSession对象的缓存 - 当我们执行查询之后，查询结果会同时存入到SqlSession为我们提供的一片区域中 - 结构是一种Map，当我们再次查询同样的数据，Mybatis会先从SqlSession中查询是否有，有的话就可以直接使用 - 当Sqlsession对象消失时，mybatis中的一级缓存就消失了 示范:12345678@Test public void testFirstCache(){ User user1 = userMapper.findById(41); System.out.println(user1); User user2 = userMapper.findById(41); System.out.println(user2); System.out.println(user1 == user2); } 日志中，可以看出只查询了一次，第二次是从缓存中取出。不过必须要确保SqlSession对象是同一个对象，没有消失，如果消失了，或者使用了clearCache()方法，缓存会被清空，就要重新查询。 1234562019-07-31 11:44:29,587 607 [ main] DEBUG xushui.dao.UserMapper.findById - ==&gt; Preparing: select * from user where id = ? 2019-07-31 11:44:29,618 638 [ main] DEBUG xushui.dao.UserMapper.findById - ==&gt; Parameters: 41(Integer)2019-07-31 11:44:29,647 667 [ main] DEBUG xushui.dao.UserMapper.findById - &lt;== Total: 1com.xushui.domain.User@e720b71com.xushui.domain.User@e720b71true 一级缓存的分析一级缓存是SqlSession范围的缓存，当调用SqlSession的修改，添加，删除，commit()，close()方法时，会清空一级缓存 二级缓存它指的是Mybatis中SqlSessionFactory对象的缓存，由同一个SqlSessionFactory对象所生产的SqlSession所共享的缓存 二级缓存的使用步骤 让Mybatis框架支持二级缓存(在SqlMapConfig.xml中配置) 1234&lt;settings&gt; &lt;!--全局开启缓存，默认为true--&gt; &lt;setting name=\"cacheEnabled\" value=\"true\"/&gt;&lt;/settings&gt; 让当前的映射文件支持二级缓存(在UserMapper.xml中配置) 12&lt;!--开启UserMapper支持二级缓存--&gt; &lt;cache/&gt; 让当前的操作支持二级缓存(在当前操作的标签上配置useCache为true) 123&lt;select id=\"findById\" parameterType=\"Integer\" resultType=\"User\" useCache=\"true\"&gt; select * from user where id = #{id}&lt;/select&gt;","link":"/2019/07/30/Mybatis延迟加载和缓存/"},{"title":"mysql必知必会 读书笔记","text":"第一章 了解SQL数据库概念​ 数据库是一种以某种有组织的方式存储的数据集合 主键的条件 任意两行都不惧有相同的主键值 每个行都必须具有一个主键值(不允许存在null) 好习惯 不更新主键列中的值 不重用主键列中的值 不再主键列中使用可能会更改的值 第三章 使用MySQL 显示表列 show columns from 表名;(describe 表名) 自增 auto_increment 显示建表语句 show create table 表名; 显示建数据库语句 show create database 数据库名; 第四章 索引数据 去处重复 select DISTINCT 列名 from 表名 DISTINCT作用于后面的所有列，使用了这个关键字除非后面的列都相等，否则会全部都索引出来。 限制结果 select 列名 from 表名 limit 5; 表示返回前5行 为了得出下一个五行 select 列名 from 表名 limit 5,5; 从第五行开始往后索引5条记录 第五章 排序索引数据 关系数据库设计理论认为，如果不能明确规定排序顺序，则不应该假定索引出的数据的顺序有意义。 数据排序 select 列名 from 表名 order by 列名; 在where关键字之后使用 可以使用非索引的列作为排序的依据 也可以用多个列作为排序的依据，按代码的顺序，来决定主次，如果主列中的值都是唯一的，则不会用次列的值排序 数据逆序排列 select 列名 from 表名 order by 列名 DESC; 在需要逆序排列的列名后加上DESC关键字 正序是ASC，是默认值 第六章 过滤数据第七章 数据过滤 在where之后and的优先级比or要高，所以在多条件组合时要注意，尽量用括号来解决。 IN ()用来指定条件范围，范围中的每个条件都可以进行匹配 IN的优点 语法更清除直观 计算次序更容易管理 IN操作符比OR操作符清单执行更快 IN的可以包含其他select语句，能够动态的建立Where子句 NOT操作符否定之后所跟的任何条件 MySQL支持对IN、BETWEEN、EXISTS子句取反 第八章 用通配符进行过滤 % 表示任何字符出现任意次数(甚至是0次) 但是%通配符不能匹配null _ 表示任何字符出现一次 关于通配符的技巧 通配符会让搜索时间变长 不要过度使用通配符，如果其他操作可以达到相同的目的，就应该使用其他操作符 确实需要使用通配符时，除非绝对有必要，否则不要把它们用在搜索模式的开始处 仔细注意通配符的位置。如果放错地方，可能不会返回想要的数据 第九章 用正则表达式进行搜索 MySQL正则表达式 REGEXP 与 like用法一致，后面跟的是正则表达式 MySQL中的正则表达式匹配不区分大小写，为区分大小写，可以使用BINARY关键字，如:where 列名 REGEXP BINARY ‘字符串’; 比起LIKE匹配整串而REGEXP匹配子串 正则表达式 . 表示任意一个字符 | 表示或 [和] [123]表示1或2或3，可以理解为[1|2|3] 可以用^来取反 [^123]就匹配除这些字符以外的字符 [0-9] 匹配数字0-9 [a-z] 匹配所有的字母 当需要匹配特殊符号时 采用加\\(两个反斜杠)的方式来区分\\.表示. 下面的标示用来标示前面一个字符 - : 表示0个或多个匹配 + : 表示1个或多个匹配 ? : 表示0个或1个匹配 {n} : 指定数目的匹配 {n,} : 不少于指定数目的匹配 {n,m} : 匹配数目的范围(m不超过255) 可以用[0-9]{4}或者[[:digit:]]{4}来代表4个数字 定位符 ^ : 文本的开始(在[和]集合中表示否定该集合) $ : 文本的结束 [[:&lt;:]] : 词的开始 [[:&gt;:]] : 词的结尾 通过^和$可以使REGEXP的作用类似于LIKE 第十章 创建计算字段 Concat(arg1,arg2,…) 这个函数在select后使用，可以将查询出来的数据以字符串的形式拼接起来 如: select Concat(名字, ‘ (‘, 城市, ‘)’) RTrim() LTrim()去掉左边多余空格 LTrim()去掉左边多余空格 S 关键字用于起别名 可以在select语句后面对列进行算数运算，然后在用AS起个别名，客户机就可以像用其他列一样用这个列 第十一章 使用数据处理函数常用文本处理函数 SOUNDEX() 是一个将任何文本串转换为描述其语音表示的字母数字模式的算法 用于匹配发音类似的值123select cust_name, cust_contactFROM customerswhere SOUNDEX(cust_contact)= SOUNDEX('Y.Lie') 日期处理函数 日期必须为yyyy-mm-dd格式 不过当你想要用日期和表中的日期相比较时，你应当使用Date()函数 Date()函数指示MySQL仅提取日期部分，例:123select cust_id, order_num from orders where Date(order_date) = '2005-09-01'; 当你只想要时间时，可以使用Time() 如果你想检索出2005年9月下的所有订单，你可以用下面两种方法 where Date(order_date) BETWEEN '2005-09-01' and '2005-09-30'; where Year(order_date) = 2005 and Month(order_date) = 9;数值处理函数 第十二章 汇总数据聚集函数 AVG()函数 求平均值 忽略值为null的行 COUNT()函数 COUNT(*) : 返回总的行数，不管是列中是否为空(null) COUNT(column) : 有指定的列名时，指定列的值null的时候，被忽略 聚集不同值 使用DISTINCT关键字，比如说AVG(DISTINCT price)，取平均值时，只考虑不同价格的。 使用DISTINCT关键字，必须使用列名不能用于计算或表达式 第十三章 分组数据 分组例子123select vend_id, count(*)from productsgroup by vend_id; GROUP BY 重要规定 GROUP BY可以包含任意数量的列，使得能对分组进行嵌套，为数据分组提供更细致的控制 GROUP BY子句中嵌套了分组，数据将在最后规定的分组上进行汇总。就是说，在建立分组时，指定的所有列都一起计算 GROUP BY子句中列出的每个列都必须是检索列或有效的表达式(但不能是聚集函数)。如果在select中使用表达式，则必须在GROUP BY子句中指定相同的表达式。不能使用别名 除聚集计算语句外，select语句中的每个列都必须在GROUP BY子句中给出 如果愤怒中具有多个null值，则null将作为一个分组返回。如果有多个null，它们将分为一组 GROUP BY子句必须出现在WHERE子句后，ORDER BY子句之前 使用ROLLUP 可以得到每个分组以及每个分组汇总级别(针对每个分组)的值123select vend_id, count(*) as num_prodsFROM productsGROUP BY vend_id with ROLLUP 结果:","link":"/2019/07/22/MySQL必知必会-读书笔记/"},{"title":"Mybatis基于注解开发","text":"使用Mybatis注解实现基本的CRUD环境搭建SqlMapConfig.xml的配置123456789101112131415161718192021222324252627282930313233&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;&lt;configuration&gt; &lt;!--引入外部配置文件--&gt; &lt;properties resource=\"jdbcConfig.properties\"&gt; &lt;/properties&gt; &lt;!--配置别名--&gt; &lt;typeAliases&gt; &lt;!--配置的是实体类所在位置--&gt; &lt;package name=\"com.xushui.domain\"&gt;&lt;/package&gt; &lt;/typeAliases&gt; &lt;!-- 配置环境 --&gt; &lt;environments default=\"mysql\"&gt; &lt;environment id=\"mysql\"&gt; &lt;transactionManager type=\"JDBC\"&gt;&lt;/transactionManager&gt; &lt;dataSource type=\"POOLED\"&gt; &lt;property name=\"driver\" value=\"${jdbc.driver}\"&gt;&lt;/property&gt; &lt;property name=\"url\" value=\"${jdbc.url}\"&gt;&lt;/property&gt; &lt;property name=\"username\" value=\"${jdbc.username}\"&gt;&lt;/property&gt; &lt;property name=\"password \" value=\"${jdbc.password}\"&gt;&lt;/property&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;!--指定带有注解的dao接口所在位置--&gt; &lt;mappers&gt; &lt;!--配置的是dao所在位置--&gt; &lt;package name=\"com.xushui.dao\"&gt;&lt;/package&gt; &lt;/mappers&gt;&lt;/configuration&gt; 在接口方法的上方直接写上注解，一共有四种注解@Select、@Insert、@Update、Delete 12345678public interface UserMapper { /** * 查询所有用户 * @return */ @Select(\"select * from user\") List&lt;User&gt; findAll();} 测试代码:12345678910111213141516171819public static void main(String[] args) throws Exception{ // 1.获取字节输入流 InputStream in = Resources.getResourceAsStream(\"SqlMapConfig.xml\"); // 2.根据字节输入流构建SqlSessionFactory SqlSessionFactoryBuilder builder = new SqlSessionFactoryBuilder(); SqlSessionFactory factory = builder.build(in); // 3.根据SqlSessionFactory生产一个SqlSession SqlSession sqlSession = factory.openSession(); // 4.根据SqlSession获取Dao的代理对象 UserMapper userMapper = sqlSession.getMapper(UserMapper.class); // 5.执行dao的方法 List&lt;User&gt; users = userMapper.findAll(); for (User user : users) { System.out.println(user); } // 6.释放资源 sqlSession.close(); in.close(); } 需要注意的事项如果采用了注解开发的形式就不能再在resources中对应目录下写xml，否则就会报错 Mybatis注解开发单表CRUD常用操作示范代码:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152public interface UserMapper { /** * 查询所有用户 * @return */ @Select(\"select * from user\") List&lt;User&gt; findAll(); /** * 保存用户 * @param user */ @Insert(\"insert into user(username,birthday,sex,address) values(#{username},#{birthday},#{sex},#{address})\") void saveUser(User user); /** * 修改user * @param user */ @Update(\"update user set username=#{username},sex=#{sex},address=#{address},birthday=#{birthday} where id=#{id}\") void updateUser(User user); /** * 根据id删除user * @param id */ @Delete(\"delete from user where id = #{id}\") void deleteUser(Integer id); /** * 通过id查找用户 * @param id * @return */ @Select(\"select * from user where id = #{id}\") User findUserById(Integer id); /** * 根据用户名称模糊查询 * @param name * @return */ @Select(\"select * from user where username like #{name}\") List&lt;User&gt; findUserByName(String name); /** * 查询用户总量 * @return */ @Select(\"select count(*) from user\") Integer findTotal();} 多表查询(一对一)用注解的方式解决数据库列名和对象的成员变量名不一致的问题在Mapper中添加注解12345678910111213141516171819202122/** * 查询所有用户 * @return */@Select(\"select * from user\")@Results(id = \"userMap\", value = { @Result(id = true, property = \"userId\", column = \"id\"), @Result(property = \"userName\", column = \"username\"), @Result(property = \"userBirthday\", column = \"birthday\"), @Result(property = \"userSex\", column = \"sex\"), @Result(property = \"userAddress\", column = \"address\")})List&lt;User&gt; findAll();/** * 通过id查找用户 * @param id * @return */@Select(\"select * from user where id = #{id}\")@ResultMap(value = {\"userMap\"})User findUserById(Integer id); 可以通过在定义Map时给id赋值，这样子在下面就可以直接用注解@ResultMap(value = {&quot;userMap&quot;})来复用，这个注解中可以添加多个map，当只有一个时，可以简写成@ResultMap(&quot;userMap&quot;) 第一步若是一对一的关系在一个对象中添加另一个对象作为成员变量例如:123456789public class Account implements Serializable { private Integer id; private Integer uid; private Integer money; // 一对一的映射 private User user; ......} 第二步在方法上添加注解123456789101112131415public interface AccountMapper { /** * 查询所有账户，并且获得每个账户所属的用户信息 * @return */ @Select(\"select * from account\") @Results(id = \"accountMap\", value = { @Result(id = true, property = \"id\", column = \"id\"), @Result(property = \"uid\", column = \"uid\"), @Result(property = \"money\", column = \"money\"), // property 表示要封装成什么 | column 表示用什么字段去查 | select 表示指向什么方法 | fetchType表示要选择什么方式加载(lazy延迟加载、eager立即加载) @Result(property = \"user\", column = \"uid\", one = @One(select = \"com.xushui.dao.UserMapper.findUserById\",fetchType = FetchType.EAGER)) }) List&lt;Account&gt; findAll();} 其中最后的@Result()注解中 property: 表示要封装成什么类型的数据 column: 表示要用什么字段去将你要封装的数据查询出来 one: 表示了一对一的注解 select: 表示了你要使用查询方法的全限定类名加方法名 fetchType: 取值有LAZY(延迟加载), EAGER(立即加载), DEFAULT(默认) 多表查询(一对多)第一步若是一对多关系则在一个对象中添加另一个对象的集合1234567891011public class User implements Serializable { private Integer userId; private String userName; private Date userBirthday; private String userSex; private String userAddress; // 一对多关系映射 List&lt;Account&gt; accounts; ......} 第二步为AccountMapper添加一个方法1234567/** * 根据用户id查询账户信息 * @param uid * @return */@Select(\"select * from account where uid = #{uid}\")List&lt;Account&gt; findByUid(Integer uid); 第三步给UserMapper添加注解1234567891011121314/** * 查询所有用户，并获取每个用户的所有账户信息 * @return */@Select(\"select * from user\")@Results(id = \"userMap\", value = { @Result(id = true, property = \"userId\", column = \"id\"), @Result(property = \"userName\", column = \"username\"), @Result(property = \"userBirthday\", column = \"birthday\"), @Result(property = \"userSex\", column = \"sex\"), @Result(property = \"userAddress\", column = \"address\"), @Result(property = \"accounts\", column = \"id\", many = @Many(select = \"com.xushui.dao.AccountMapper.findByUid\", fetchType = FetchType.LAZY))})List&lt;User&gt; findAll(); 关于缓存的配置一级缓存在注解配置中是默认可以使用的二级缓存则需要在Mapper上方添加@CacheNamespace(blocking = true)，就可以使用了","link":"/2019/07/31/Mybatis基于注解开发/"},{"title":"spring学习笔记(1)","text":"Spring的概述Spring是什么Spring是分层的Java SE/EE应用 full-stack轻量级开源框架，以IoC(Inverse Of Control:反转控制)和AOP(Aspect Oriented Programming:面向切面编程)为内核，提供展现层 SpringMVC 和持久层 Spring JDBC 以及业务层事务管理等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库。 程序耦合以及解耦 程序的耦合 耦合: 程序间的依赖关系 包括: 类之间的依赖 方法间的依赖 解耦: 降低程序间的依赖关系 实际开发中: 应该做到编译期不依赖，运行时才依赖 解耦思路: 使用反射来创建对象，而避免用new 通过读取配置文件来获取要创建对象的全限定类名 用工厂模式创建对象(解耦)12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758/** * 一个创建Bean对象的工厂 * * Bean: 在计算机英语中，有可重用组件的含义。 * JavaBean: 用Java语言编写的可重用组件 * JavaBean &gt; 实体类 * * 他就是创建service和dao对象的。 * * 1. 需要一个配置文件来配置service和dao * 配置的内容: 唯一标志=全限定类名(key=value) * 2. 通过读取配置文件中的配置的内容，反射创建对象 * * 配置文件可以是xml也可以是properties */public class BeanFactory { // 定义一个Properties对象 private static Properties prop; // 定义一个Map，用于存放我们要创建的对象。我们把它称之为容器 private static Map&lt;String, Object&gt; beans; // 使用静态代码块为Properties对象赋值 static { try { prop = new Properties(); // 获取properties文件的流对象【一定要用类加载器来访问，不然程序一旦部署就找不到，放在resources下的配置文件，最后会成为根路径下的文件】 InputStream in = BeanFactory.class.getClassLoader().getResourceAsStream(\"bean.properties\"); prop.load(in); // 实例化容器 beans = new HashMap&lt;String, Object&gt;(); // 取出配置文件中所有的key Enumeration&lt;Object&gt; keys = prop.keys(); // 遍历枚举 while (keys.hasMoreElements()) { // 取出每个key String key = keys.nextElement().toString(); // 根据key获取value String beanPath = prop.getProperty(key); // 反射创建对象 Object value = Class.forName(beanPath).newInstance(); // 把key和value存入容器中 beans.put(key, value); } } catch (Exception e) { // 没有读取到这个配置文件，直接抛出异常。无法继续进行下去。 throw new ExceptionInInitializerError(\"初始化properties失败\"); } } /** * 用这种方式将方法名和Bean存放在HashMap中，通过key(方法名)来取出对象。这样的对象是单例的 * @param beanName * @return */ public static Object getBean(String beanName) { return beans.get(beanName); } 有了这样的工厂就可以通过AccountService service = (AccountService) BeanFactory.getBean(&quot;accountService&quot;);方式来创建对象，就是将创建对象的控制权交给了工厂，这就是控制反转 通过这种方式降低了程序之间的耦合 IOC的概念和Spring中的IOC控制反转(IOC)把对象创建的权利交给了框架，是框架的重要特征，它包括了依赖注入(DI)和依赖查找(Dependency Lookup)。其主要作用就是削减计算机程序的耦合(程序间的依赖关系) Spring中基于XML的IOC环境搭建 在pom.xml的依赖中加入 12345&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context&lt;/artifactId&gt; &lt;version&gt;5.0.2.RELEASE&lt;/version&gt; &lt;/dependency&gt; 然后在resources中创建一个bean.xml文件并导入约束 123456&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"&gt;&lt;/beans&gt; 把对象的创建交给Spring来管理 12&lt;bean id=\"accountService\" class=\"com.xushui.service.Impl.AccountServiceImpl\"&gt;&lt;/bean&gt; &lt;bean id=\"accountDao\" class=\"com.xushui.dao.Impl.AccountDaoImpl\"&gt;&lt;/bean&gt; 4.测试代码123456789101112131415/** * 获取spring的IOC核心容器，并根据id获取对象 * @param args */ public static void main(String[] args) { // 1.获取核心容器对象 ApplicationContext ac = new ClassPathXmlApplicationContext(\"bean.xml\"); // 2.根据id获取bean对象 AccountService accountService = (AccountService) ac.getBean(\"accountService\"); // 两种方式都可以，一种是强制转换，一种是加上你要转的类的字节码文件 AccountDao accountDao = ac.getBean(\"accountDao\",AccountDao.class); System.out.println(accountService); System.out.println(accountDao); } 一些要注意的地方ApplicationContext的三个常用实现类1. ClassPathXmlApplicationContext: 它可以加载类路径下的配置文件，要求配置文件必须在类路径下(常用) 2. FileSystemXmlApplicationContext: 它可以加载磁盘任意路径下的配置文件(必须有访问权限) 3. AnnotationConfigApplicationContext: 它是用于读取注解创建容器的 核心容器的两个接口引发的问题ApplicationContext(大多数采用这个): 单例对象适用 它在构建核心容器时，创建对象采取的策略是立即加载的方式(一读取完配置文件马上创建配置文件中配置的对象) Spring是个很智能的框架，当你选择作用范围为prototype时，它会自动变为延迟加载策略 BeanFactory: 多例对象适用 它在构建核心容器时，采用的是延迟加载的策略(什么时候根据id获取对象了，什么时候才创建对象) Spring对bean管理的细节创建bean的三种方式 使用默认构造函数创建，若类中没有默认构造方法，则对象无法创建 1&lt;bean id=\"accountService\" class=\"com.xushui.service.Impl.AccountServiceImpl\"&gt;&lt;/bean&gt; 使用普通工厂中的方法创建对象(使用某个类中的方法创建对象，并存入spring容器) 12&lt;bean id=\"instanceFactory\" class=\"com.xushui.factory.InstanceFactory\"&gt;&lt;/bean&gt;&lt;bean id=\"accountService\" factory-bean=\"instanceFactory\" factory-method=\"getAccountService\"&gt;&lt;/bean&gt; 使用工厂中的静态方法创建对象(使用某个类的静态方法创建对象，并存入spring容器) 1&lt;bean id=\"accountService\" class=\"com.xushui.factory.StaticFactory\" factory-method=\"getAccountService\"&gt;&lt;/bean&gt; bean对象的作用范围bean作用范围调整 bean标签的scope属性: 作用:用于指定bean的作用范围 取值: 前两个比较常用 singleton: 单例的(默认值) prototype: 多例的 request: 作用于web项目的请求范围 session: 作用于web项目的会话范围 global-session: 作用于集群环境的会话范围(全局会话范围)，当不是集群环境时，他就是session bean对象的生命周期 单例对象 出生: 当容器创建时，对象出生 活着: 只要容器还在，对象一直活着 死亡: 容器销毁，对象死亡 总结: 单例对象的生命周期和容器相同 多例对象 出生: 当我们使用对象时，Spring框架为我们创建 活着: 对象只要是在使用过程中。一直是活着 死亡: 当对象长时间没用，且没有别的对象引用，由Java的垃圾回收机制回收 依赖注入(Dependency Injection) 依赖关系的管理: 都交由Spring框架来维护 当前类需要其他类的对象，由Spring提供，我们只用在配置文件中说明 依赖关系的维护我们就称之为依赖注入 注意: 经常变化的数据，并不适合注入方式 支持注入的数据类型 基本类型和String 其他bean类型(配置文件中或者注解配置过的bean) 复杂类型/集合类型 注入类型 使用构造函数提供 使用set方法提供 使用注解提供 构造函数的注入 使用的标签: constructior-arg 标签出现的位置: bean标签的内部 标签中的属性 type: 用于指定要注入的数据的数据类型，该数据赋值给构造函数中该数据类型的一个或多个 index: 用于给构造函数中指定索引位置的参数赋值 索引从0开始 name: (常用)用于给构造函数中指定名字的参数赋值 value: 用于提供String类型和基本类型的数据 ref: 用于指定其他bean类的数据，值得就是Spring的IOC核心容器中出现过的bean对象 示例123456789101112131415public class AccountServiceImpl implements AccountService { private String name; private Integer age; private Date birthday; public AccountServiceImpl(String name, Integer age, Date birthday){ this.name = name; this.age = age; this.birthday = birthday; } public void saveAccount() { System.out.println(\"保存了 \" + \"名字: \" + name +\", 年龄: \"+age+\", 生日: \" + birthday); }} bin.xml中 1234567&lt;bean id=\"accountService\" class=\"com.xushui.service.Impl.AccountServiceImpl\"&gt; &lt;constructor-arg name=\"name\" value=\"张三\"&gt;&lt;/constructor-arg&gt; &lt;constructor-arg name=\"age\" value=\"18\"&gt;&lt;/constructor-arg&gt; &lt;constructor-arg name=\"birthday\" ref=\"now\"&gt;&lt;/constructor-arg&gt;&lt;/bean&gt;&lt;bean id=\"now\" class=\"java.util.Date\"&gt;&lt;/bean&gt; 优势: 在获取bean对象时，注入数据是必须的操作，否则对象无法创建。弊端: 改变了bean的实例化方式，即使我们在创建对象时，用不到这些数据，也必须提供 set方法注入(常用) 使用的标签: property 出现的位置: bean标签的内部 标签属性: name:用于指定注入时所调用set的方法的名称 value和ref与构造函数注入一样 优势: 创建对象是没有明确的限制，可以直接使用默认的构造函数弊端: 如果有某个成员必须有值，set方法无法保证 复杂类型/集合类型注入12345678910111213141516171819202122232425262728293031323334353637&lt;bean id=\"accountService3\" class=\"com.xushui.service.Impl.AccountServiceImpl3\"&gt; &lt;property name=\"myStrs\"&gt; &lt;array&gt; &lt;value&gt;aaa&lt;/value&gt; &lt;value&gt;bbb&lt;/value&gt; &lt;value&gt;ccc&lt;/value&gt; &lt;/array&gt; &lt;/property&gt; &lt;property name=\"myList\"&gt; &lt;list&gt; &lt;value&gt;aaa&lt;/value&gt; &lt;value&gt;bbb&lt;/value&gt; &lt;value&gt;ccc&lt;/value&gt; &lt;/list&gt; &lt;/property&gt; &lt;property name=\"mySet\"&gt; &lt;set&gt; &lt;value&gt;aaa&lt;/value&gt; &lt;value&gt;aaa&lt;/value&gt; &lt;value&gt;aaa&lt;/value&gt; &lt;/set&gt; &lt;/property&gt; &lt;property name=\"myMap\"&gt; &lt;map&gt; &lt;entry key=\"keyA\" value=\"aaa\"&gt;&lt;/entry&gt; &lt;entry key=\"keyB\"&gt;&lt;value&gt;bbb&lt;/value&gt;&lt;/entry&gt; &lt;entry key=\"keyC\" value=\"ccc\"&gt;&lt;/entry&gt; &lt;/map&gt; &lt;/property&gt; &lt;property name=\"myProps\"&gt; &lt;props&gt; &lt;prop key=\"AAA\"&gt;bbb&lt;/prop&gt; &lt;prop key=\"CCC\"&gt;Ddd&lt;/prop&gt; &lt;/props&gt; &lt;/property&gt;&lt;/bean&gt; 用于给List结构集合注入标签: list、array、set 用于给Map结构集合注入标签: map、props 结构相同标签可以互换","link":"/2019/08/01/Spring学习笔记-1/"}],"tags":[{"name":"Mybatis","slug":"Mybatis","link":"/tags/Mybatis/"},{"name":"MySQL","slug":"MySQL","link":"/tags/MySQL/"},{"name":"Spring","slug":"Spring","link":"/tags/Spring/"}],"categories":[]}